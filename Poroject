using System;
using System.Collections.Generic;
using System.Linq;

class Program
{
    // Attributes
    static Dictionary<string, List<string>> myDictionary = new Dictionary<string, List<string>>();

    // Functions
    static void PopulateDictionary()
    {
        myDictionary["red"] = new List<string> { "color", "passion", "energy" };
        myDictionary["banana"] = new List<string> { "fruit", "yellow", "tropical" };
        myDictionary["France"] = new List<string> { "country", "Europe", "wine" };
        myDictionary["elephant"] = new List<string> { "animal", "large", "intelligent" };
        myDictionary["Python"] = new List<string> { "language", "general-purpose", "object-oriented" };
    }

    static void DisplayDictionary()
    {
        Console.WriteLine("Dictionary Contents:");
        foreach (var kvp in myDictionary)
        {
            Console.WriteLine($"{kvp.Key}: {string.Join(", ", kvp.Value)}");
        }
    }

    static void RemoveKey()
    {
        Console.Write("Enter the key to remove: ");
        string key = Console.ReadLine();
        if (myDictionary.ContainsKey(key))
        {
            myDictionary.Remove(key);
            Console.WriteLine($"Key '{key}' removed.");
        }
        else
        {
            Console.WriteLine($"Key '{key}' not found.");
        }
    }

    static void AddNewKeyValue()
    {
        Console.Write("Enter the new key: ");
        string key = Console.ReadLine();
        Console.Write("Enter the values (comma-separated): ");
        string valuesInput = Console.ReadLine();
        var values = valuesInput.Split(',').Select(v => v.Trim()).ToList();
        myDictionary[key] = values;
        Console.WriteLine($"New key '{key}' added with values: {string.Join(", ", values)}");
    }

    static void AddValueToExistingKey()
    {
        Console.Write("Enter the key: ");
        string key = Console.ReadLine();
        if (myDictionary.ContainsKey(key))
        {
            Console.Write("Enter the new value to add: ");
            string newValue = Console.ReadLine();
            myDictionary[key].Add(newValue);
            Console.WriteLine($"Value '{newValue}' added to key '{key}'.");
        }
        else
        {
            Console.WriteLine($"Key '{key}' not found.");
        }
    }

    static void SortKeys()
    {
        Console.WriteLine("Sorted Keys:");
        foreach (var key in myDictionary.Keys.OrderBy(k => k))
        {
            Console.WriteLine(key);
        }
    }

    static void Main(String[] args)
    {
        // Keep running the program until user exits
        while (true)
        {
            Console.WriteLine("\nSelect an option:");
            Console.WriteLine("a. Populate the Dictionary");
            Console.WriteLine("b. Display Dictionary Contents");
            Console.WriteLine("c. Remove a Key");
            Console.WriteLine("d. Add a New Key and Value");
            Console.WriteLine("e. Add a Value to an Existing Key");
            Console.WriteLine("f. Sort the Keys");
            Console.WriteLine("q. Quit");
            string choice = Console.ReadLine().ToLower();

            switch (choice)
            {
                case "a":
                    PopulateDictionary();
                    break;
                case "b":
                    DisplayDictionary();
                    break;
                case "c":
                    RemoveKey();
                    break;
                case "d":
                    AddNewKeyValue();
                    break;
                case "e":
                    AddValueToExistingKey();
                    break;
                case "f":
                    SortKeys();
                    break;
                case "q":
                    Console.WriteLine("Exiting...");
                    return;
                default:
                    Console.WriteLine("Invalid choice. Please try again.");
                    break;
            }
        }
    }
}
